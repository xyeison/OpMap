#!/usr/bin/env python3
"""
Verificaci√≥n final de todas las correcciones
"""
from supabase import create_client

supabase_url = 'https://norvxqgohddgsdkggqzq.supabase.co'
supabase_key = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im5vcnZ4cWdvaGRkZ3Nka2dncXpxIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTMyMDExMjUsImV4cCI6MjA2ODc3NzEyNX0.BRWIYeD_5OlpVKIrP1QzUmkSx6HEVGzcEUUiSK8CmJs'

supabase = create_client(supabase_url, supabase_key)

print("‚úÖ VERIFICACI√ìN FINAL DE CORRECCIONES")
print("="*60)

# 1. Verificar casos espec√≠ficos mencionados por el usuario
print("\nüîç CASOS ESPEC√çFICOS:")
print("-"*40)

# Hospital 900958564-2 (debe estar asignado a Kennedy, no a San Crist√≥bal)
h1 = supabase.table('hospitals').select('id, name, municipality_name').eq('code', '900958564-2').execute()
if h1.data:
    h_id = h1.data[0]['id']
    print(f"\nHospital: {h1.data[0]['name']}")
    print(f"C√≥digo: 900958564-2")
    print(f"Municipio: {h1.data[0]['municipality_name']}")
    
    # Obtener distancias a todos los KAMs
    distances = supabase.table('hospital_kam_distances').select('*, kams(name)').eq('hospital_id', h_id).order('travel_time').execute()
    
    print(f"\nDistancias disponibles:")
    for d in distances.data[:5]:  # Top 5 m√°s cercanos
        print(f"   ‚Üí {d['kams']['name']}: {d['travel_time']} min")
    
    # Ver asignaci√≥n actual
    assignment = supabase.table('assignments').select('*, kams(name)').eq('hospital_id', h_id).execute()
    if assignment.data:
        print(f"\nüìç Asignaci√≥n actual: {assignment.data[0]['kams']['name']}")
        print(f"   Tiempo: {assignment.data[0]['travel_time']} min")
        
        if assignment.data[0]['kams']['name'] != 'KAM Kennedy' and distances.data[0]['kams']['name'] == 'KAM Kennedy':
            print("   ‚ö†Ô∏è NECESITA RECALCULAR - Kennedy es m√°s cercano!")

print("\n" + "-"*40)

# Hospital 890701718-1 en L√≠bano, Tolima
h2 = supabase.table('hospitals').select('id, name, municipality_name').eq('code', '890701718-1').execute()
if h2.data:
    h_id = h2.data[0]['id']
    print(f"\nHospital: {h2.data[0]['name']}")
    print(f"C√≥digo: 890701718-1")
    print(f"Municipio: {h2.data[0]['municipality_name']}")
    
    # Obtener distancias
    distances = supabase.table('hospital_kam_distances').select('*, kams(name)').eq('hospital_id', h_id).order('travel_time').execute()
    
    if distances.data:
        print(f"\nDistancias disponibles:")
        for d in distances.data[:5]:
            print(f"   ‚Üí {d['kams']['name']}: {d['travel_time']} min")
        
        # Buscar espec√≠ficamente Pereira
        pereira_dist = [d for d in distances.data if 'Pereira' in d['kams']['name']]
        if pereira_dist:
            print(f"\n‚úÖ KAM Pereira S√ç tiene distancia: {pereira_dist[0]['travel_time']} min")
        else:
            print("\n‚ùå KAM Pereira NO tiene distancia calculada")
    else:
        print("\n‚ùå No hay distancias calculadas para este hospital")
    
    # Ver asignaci√≥n
    assignment = supabase.table('assignments').select('*, kams(name)').eq('hospital_id', h_id).execute()
    if assignment.data:
        print(f"\nüìç Asignaci√≥n actual: {assignment.data[0]['kams']['name']}")
        print(f"   Tiempo: {assignment.data[0]['travel_time']} min")
    else:
        print("\nüìç Sin asignaci√≥n (probablemente > 240 min a todos los KAMs)")

# 2. Estad√≠sticas generales
print("\n" + "="*60)
print("üìä ESTAD√çSTICAS GENERALES:")
print("-"*40)

# Tabla hospital_kam_distances
distances_stats = supabase.table('hospital_kam_distances').select('travel_time').execute()
times = [d['travel_time'] for d in distances_stats.data if d['travel_time']]

print(f"\nTabla hospital_kam_distances:")
print(f"   Total registros: {len(distances_stats.data)}")
print(f"   Con tiempo: {len(times)}")
print(f"   Tiempo m√≠nimo: {min(times)} min")
print(f"   Tiempo m√°ximo: {max(times)} min ({max(times)/60:.1f} horas)")
print(f"   Tiempo promedio: {sum(times)/len(times):.1f} min")

# Verificar si hay valores sospechosos
suspicious = [t for t in times if t > 1440]
if suspicious:
    print(f"\n‚ö†Ô∏è ALERTA: {len(suspicious)} registros > 24 horas")
    print(f"   Estos podr√≠an ser rutas leg√≠timamente largas o errores")
    print(f"   Valores: {sorted(suspicious)[:10]}...")  # Primeros 10

# Tabla assignments
assignments_stats = supabase.table('assignments').select('travel_time').execute()
assign_times = [a['travel_time'] for a in assignments_stats.data if a['travel_time']]

print(f"\nTabla assignments:")
print(f"   Total asignaciones: {len(assignments_stats.data)}")
print(f"   Con tiempo: {len(assign_times)}")
if assign_times:
    print(f"   Tiempo m√≠nimo: {min(assign_times)} min")
    print(f"   Tiempo m√°ximo: {max(assign_times)} min")
    print(f"   Tiempo promedio: {sum(assign_times)/len(assign_times):.1f} min")

# Verificar coherencia
assign_suspicious = [t for t in assign_times if t > 240]
if assign_suspicious:
    print(f"\n‚ö†Ô∏è {len(assign_suspicious)} asignaciones > 240 min (l√≠mite est√°ndar)")

print("\n" + "="*60)
print("üéØ RESUMEN FINAL:")
print("-"*40)

if not suspicious and not assign_suspicious:
    print("‚úÖ Todas las correcciones est√°n completas")
    print("‚úÖ Los tiempos est√°n en MINUTOS")
    print("‚úÖ No hay valores obviamente incorrectos")
    print("\nüìå SIGUIENTE PASO:")
    print("   ‚Üí Hacer clic en 'Recalcular Asignaciones' en la web")
    print("   ‚Üí Esto reasignar√° hospitales con los tiempos corregidos")
else:
    print("‚ö†Ô∏è Hay algunos valores que revisar:")
    if suspicious:
        print(f"   - {len(suspicious)} distancias > 24 horas en hospital_kam_distances")
    if assign_suspicious:
        print(f"   - {len(assign_suspicious)} asignaciones > 240 min en assignments")
    print("\nEstos podr√≠an ser correctos (rutas muy largas) o necesitar revisi√≥n")

print("\n" + "="*60)