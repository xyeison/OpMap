#!/usr/bin/env python3
"""
Verificar estado del territorio de V√©lez (68861)
"""
import os
import sys
from dotenv import load_dotenv

sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from supabase import create_client, Client

# Cargar variables de entorno
load_dotenv()

# URL correcta de Supabase
supabase_url = 'https://norvxqgohddgsdkggqzq.supabase.co'
supabase_key = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im5vcnZ4cWdvaGRkZ3Nka2dncXpxIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTMyMDExMjUsImV4cCI6MjA2ODc3NzEyNX0.BRWIYeD_5OlpVKIrP1QzUmkSx6HEVGzcEUUiSK8CmJs'

supabase: Client = create_client(supabase_url, supabase_key)

print("üîç Analizando territorio de V√©lez (68861)...\n")

# 1. Buscar todos los hospitales en V√©lez
hospitals_result = supabase.table('hospitals').select('*').eq('municipality_id', '68861').eq('active', True).execute()

print(f"üìç Hospitales en V√©lez: {len(hospitals_result.data)}")
for hospital in hospitals_result.data:
    print(f"   - {hospital['name']} ({hospital['code']})")
    print(f"     Camas: {hospital.get('beds', 0)}")
    print(f"     Coordenadas: {hospital['lat']}, {hospital['lng']}")
    
    # Buscar asignaci√≥n
    assignment = supabase.table('assignments').select('*, kams(name)').eq('hospital_id', hospital['id']).execute()
    if assignment.data:
        print(f"     ‚úÖ ASIGNADO a: {assignment.data[0]['kams']['name']}")
        print(f"     Tiempo: {round(assignment.data[0].get('travel_time', 0) / 60)} minutos")
    else:
        print(f"     ‚ùå NO ASIGNADO")

print("\n" + "="*60)

# 2. Verificar si alg√∫n otro hospital en V√©lez est√° asignado
print("\nüè• Resumen del municipio de V√©lez:")
assigned_count = 0
unassigned_count = 0

for hospital in hospitals_result.data:
    assignment = supabase.table('assignments').select('id').eq('hospital_id', hospital['id']).execute()
    if assignment.data:
        assigned_count += 1
    else:
        unassigned_count += 1

print(f"   Total hospitales: {len(hospitals_result.data)}")
print(f"   Asignados: {assigned_count}")
print(f"   NO asignados: {unassigned_count}")

# 3. Verificar en otras tablas si V√©lez aparece como territorio de alg√∫n KAM
print("\nüó∫Ô∏è Verificando si V√©lez aparece como territorio asignado...")

# Buscar todos los hospitales asignados y ver si alguno est√° en V√©lez
assignments_in_velez = supabase.table('assignments').select('*, hospitals!inner(municipality_id), kams(name)').eq('hospitals.municipality_id', '68861').execute()

if assignments_in_velez.data:
    print(f"‚ö†Ô∏è INCONSISTENCIA: Hay {len(assignments_in_velez.data)} asignaciones para hospitales en V√©lez")
    for a in assignments_in_velez.data:
        print(f"   - Hospital ID: {a['hospital_id']}, KAM: {a['kams']['name']}")
else:
    print("‚úÖ No hay asignaciones para ning√∫n hospital en V√©lez (correcto)")

# 4. Verificar tiempos de viaje desde KAMs cercanos
print("\nüöó Verificando tiempos de viaje desde KAMs cercanos a V√©lez...")

# Coordenadas aproximadas de V√©lez
velez_lat = 6.01564392
velez_lng = -73.67397299

# Buscar tiempos en cach√© para cualquier hospital de V√©lez
kams = supabase.table('kams').select('id, name, lat, lng').eq('active', True).execute()

for kam in kams.data[:5]:  # Solo los primeros 5 KAMs
    kam_lat = round(kam['lat'], 6)
    kam_lng = round(kam['lng'], 6)
    
    # Buscar tiempo hacia el centro de V√©lez (aproximado)
    cache = supabase.table('travel_time_cache').select('travel_time').eq('origin_lat', kam_lat).eq('origin_lng', kam_lng).execute()
    
    # Filtrar los que est√°n cerca de V√©lez
    velez_times = []
    for c in cache.data:
        # Esta es una aproximaci√≥n, buscaremos destinos cercanos a V√©lez
        pass
    
    # Buscar espec√≠ficamente para el hospital de V√©lez
    velez_hospital_lat = round(velez_lat, 6)
    velez_hospital_lng = round(velez_lng, 6)
    
    specific_cache = supabase.table('travel_time_cache').select('travel_time').eq('origin_lat', kam_lat).eq('origin_lng', kam_lng).eq('dest_lat', velez_hospital_lat).eq('dest_lng', velez_hospital_lng).execute()
    
    if specific_cache.data:
        minutes = round(specific_cache.data[0]['travel_time'] / 60)
        status = "‚úÖ Dentro del l√≠mite" if minutes <= 240 else "‚ùå Fuera del l√≠mite (>4h)"
        print(f"   {kam['name']}: {minutes} minutos {status}")