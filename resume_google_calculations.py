#!/usr/bin/env python3
"""
Continuar c√°lculos de Google Maps usando el cach√© existente
"""
import json
import time
import sys

# Cargar el cach√©
with open('data/cache/google_distance_matrix_cache.json', 'r') as f:
    cache = json.load(f)

print(f"‚úÖ Rutas ya calculadas en cach√©: {len(cache)}")

# Contar cu√°ntas son None (sin ruta)
sin_ruta = sum(1 for v in cache.values() if v is None)
con_ruta = sum(1 for v in cache.values() if v is not None)

print(f"   - Con ruta v√°lida: {con_ruta}")
print(f"   - Sin ruta (None): {sin_ruta}")

# Ver algunas estad√≠sticas de tiempos
tiempos = [v for v in cache.values() if v is not None]
if tiempos:
    print(f"\nüìä Estad√≠sticas de tiempos:")
    print(f"   - M√≠nimo: {min(tiempos):.1f} minutos")
    print(f"   - M√°ximo: {max(tiempos):.1f} minutos")
    print(f"   - Promedio: {sum(tiempos)/len(tiempos):.1f} minutos")

# Ejecutar el algoritmo usando el cach√© existente
print("\nüöÄ Ejecutando algoritmo con cach√© existente...")
print("   (sin hacer nuevas consultas a Google Maps)")

# Importar y ejecutar
from opmap_google_matrix import GoogleMapsOpMapAlgorithm, CleanMapVisualizer
from datetime import datetime
import os
import webbrowser

algorithm = GoogleMapsOpMapAlgorithm()

# Cargar datos
algorithm.load_data(
    'data/json/sellers.json',
    'data/psv/hospitals.psv',
    'data/json/adjacency_matrix.json'
)

# El cach√© ya est√° cargado, solo ejecutar asignaci√≥n
print("\nüèÉ Ejecutando asignaci√≥n con tiempos reales...")
assignments = algorithm.run_assignment()

# Guardar resultados
timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
output_file = f'output/opmap_google_cached_{timestamp}.json'

output_data = {
    'metadata': {
        'timestamp': timestamp,
        'algorithm': 'GoogleMapsOpMapAlgorithm',
        'total_kams': len(algorithm.sellers),
        'total_ips': len(algorithm.hospitals),
        'cache_size': len(algorithm.cached_times),
        'used_cache': True
    },
    'assignments': assignments
}

os.makedirs('output', exist_ok=True)
with open(output_file, 'w', encoding='utf-8') as f:
    json.dump(output_data, f, ensure_ascii=False, indent=2)

print(f"\n‚úÖ Resultados guardados en: {output_file}")

# Generar mapa
print("\nüó∫Ô∏è  Generando visualizaci√≥n del mapa...")
visualizer = CleanMapVisualizer()
map_file = f'output/opmap_google_cached_{timestamp}.html'
visualizer.create_map(assignments, map_file)

print(f"\n‚úÖ Mapa guardado en: {map_file}")
print(f"üìç Abriendo mapa en el navegador...")

# Abrir en navegador
webbrowser.open(f"file://{os.path.abspath(map_file)}")